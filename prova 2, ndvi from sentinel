# create a small code in R, Given a generic sentinel product database composed of a time series with 10 imagines for the cration of an ndvi georeferenced map. One for every product

#Imports
library(raster)
library(rgdal)

#Set working directory
setwd("/home/vittorio/Scrivania/Sentinel")

#Create a vector with the names of the 10 ndvi raster files
image_name <- c("ndvi1.tif", "ndvi2.tif", "ndvi3.tif", "ndvi4.tif", "ndvi5.tif",
                "ndvi6.tif", "ndvi7.tif", "ndvi8.tif", "ndvi9.tif", "ndvi10.tif")


#Open the first raster and get its extent
r <- raster(image_name[1])
ex <- extent(r)

#Resample the rasters to a common extent
image_res <- list()
for (i in 1:length(image_name)){
  r <- raster(image_name[i])
  image_res[[i]] <- projectRaster(r, ex, method = "bilinear", overwrite = TRUE)
}

#Get the mean raster
image_mean <- calc(image_res, mean)

#Plot the mean raster
plot(image_mean)

#Write the raster in a geotiff file
writeRaster(image_mean, "image_mean.tif", format = "GTiff")

#Create a vector with the names of the 10 raster files
image_name <- c("image_1.tif", "image_2.tif", "image_3.tif", "image_4.tif", "image_5.tif",
                "image_6.tif", "image_7.tif", "image_8.tif", "image_9.tif", "image_10.tif")


#Open the first raster and get its extent
r <- raster(image_name[1])
ex <- extent(r)

#Resample the rasters to a common extent
image_res <- list()
for (i in 1:length(image_name)){
  r <- raster(image_name[i])
  image_res[[i]] <- projectRaster(r, ex, method = "bilinear", overwrite = TRUE)
}

#Get the mean raster
image_mean <- calc(image_res, mean)

#Plot the mean raster
plot(image_mean)

#Write the raster in a geotiff file
writeRaster(image_mean, "image_mean.tif", format = "GTiff")


#############
#to read a sentinel 2 l2a image using the R package s2r

library(raster) 
library(rgdal)
library(rgeos)
library(rasterVis)
library(s2r)



#read the sentinel 2 l2a product

s2_l2a <- read_s2_l2a('D:/sen2/S2B_MSIL2A_20180810T141641_N0206_R095_T32TMN_20180810T182716.SAFE', res = 10)

#to see the attributes of the product

attributes(s2_l2a)

#to see the extent of the product

plot(extent(s2_l2a))

#to see the bands 

plotRGB(s2_l2a)

#to see the properties of the bands

s2_l2a

#to see the bands 

plotRGB(s2_l2a, r=3, g=2, b=1)

#to calculate the ndvi map using the resolution of the rgb band

ndvi <- (s2_l2a[[4]] - s2_l2a[[3]]) / (s2_l2a[[4]] + s2_l2a[[3]])

#to plot the ndvi map

plot(ndvi)

#to georeference the ndvi map

ndvi <- projectRaster(ndvi, crs=crs(s2_l2a[[1]]))

#to see the data type of the ndvi map

class(ndvi)

#to see the extent of the ndvi map

plot(extent(ndvi))

#to see the properties of the ndvi map

ndvi

#to save the ndvi map in a tiff image

writeRaster(ndvi, filename = 'D:/ndvi/ndvi.tif', format="GTiff", overwrite=TRUE)

#to open the list of sentinel 2 product

list_s2_product <- list.files(pattern = "*.SAFE", path = "D:/sen2", full.names = T)

#to loop for each sentinel product for the creation of the ndvi map

for (i in 1:length(list_s2_product)){
  s2_l2a <- read_s2_l2a(list_s2_product[i], res = 10)
  ndvi <- (s2_l2a[[4]] - s2_l2a[[3]]) / (s2_l2a[[4]] + s2_l2a[[3]])
  ndvi <- projectRaster(ndvi, crs=crs(s2_l2a[[1]]))
  writeRaster(ndvi, filename = paste0('D:/ndvi/product', i, '.tif'), format="GTiff", overwrite=TRUE)
}
